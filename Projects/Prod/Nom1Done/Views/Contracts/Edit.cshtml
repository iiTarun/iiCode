@model Nom.ViewModel.ContractsDTO

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var recLoc = "Select";
    var delLoc = "Select";
}


<div class="row">
    <div class="col-lg-12">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <h2>Edit</h2>
            </div>
            <div class="ibox-content">
               

                @using (Html.BeginForm())// "Edit", "Contracts", FormMethod.Post,new { @id = "EditContact" }))
                {
                    @*@Html.AntiForgeryToken()*@
                    @Html.HiddenFor(a => a.PipelineID, new { @id = "PipelineId", @class = "form-control" })
                    @Html.HiddenFor(a => a.CreatedDate, new { @id = "CreatedDate", @class = "form-control" })
                    <div class="form-horizontal">
                        <h4>Contract</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            <label class="col-sm-2 control-label">* Contract #</label>
                            @*@Html.LabelFor(model => model.RequestNo, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.RequestNo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.RequestNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>


                        <div class="form-group">
                           <label class="col-sm-2 control-label">Contract Type</label>
                           <div class="col-md-10">
                               @Html.DropDownListFor(model => model.RequestTypeID, new SelectList(ViewBag.RequestType, "ID", "Name", Model.RequestTypeID),"", new { @class = "form-control" })
                               @*@Html.ValidationMessageFor(model => model.RequestTypeID, "", new { @class = "text-danger" })*@
                           </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">* Rate Schedule</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.RateSchedule, new { htmlAttributes = new { @class = "form-control" } })
                             </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.FuelPercentage, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">* FuelPercentage (Max: 99.99)</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FuelPercentage, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FuelPercentage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.MDQ, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">* MDQ/MSQ</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MDQ, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0"} })
                                @Html.ValidationMessageFor(model => model.MDQ, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.LocationFromID, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">* Receipt Location</label>
                            <div class="col-md-10" id="RecLocDiv">
                                <span data-toggle="modal" onclick="OpenPopUpLocation('RecLoc',@Model.PipelineID)">
                                  @if(!String.IsNullOrEmpty(Model.LocationFrom)) {
                                      recLoc = Model.LocationFrom;
                                  }
                                 @recLoc
                                </span>
                                @Html.HiddenFor(model => model.LocationFromID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.HiddenFor(model => model.LocationFrom, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.LocationToID, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">* Delivery Location</label>
                            <div class="col-md-10" id="DelLocDiv">
                                <span data-toggle="modal" onclick="OpenPopUpLocation('DelLoc',@Model.PipelineID)">
                                    @if(!String.IsNullOrEmpty(Model.LocationTo))
                                    {
                                      recLoc = Model.LocationTo;
                                    }
                                    @recLoc                                    
                                </span>
                                @Html.HiddenFor(model => model.LocationToID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.HiddenFor(model => model.LocationTo, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>
                        <div class="form-group">
                            @*@Html.LabelFor(model => model.ValidUpto, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">Expires</label>
                            <div class="col-md-10">
                                <div class="input-group date">
                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    @Html.TextBoxFor(a => a.ValidUpto, "{0:MM/dd/yyyy }", new { @class = "form-control dtpicker", placeholder = "Expire Date ... ", @readonly = "true" })
                                </div>     
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => model.ValidUpto, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">* Receipt Zone</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ReceiptZone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ReceiptZone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>


                        <div class="form-group">
                            @*@Html.LabelFor(model => model.ValidUpto, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <label class="col-sm-2 control-label">* Delivery Zone</label>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DeliveryZone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DeliveryZone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                @*<button class="btn btn-white" type="button" onclick="clean();">Cancel</button>*@
                                <button class="btn btn-primary" style="background-color:#FF6C3A !important; border-color:#FF6C3A !important;" name="Save" onclick="return validate();" type="submit">Save</button>
                            </div>
                        </div>
                    </div>
                    <div>
                        @Html.ActionLink("Back to List", "Index", new { pipelineId = Model.PipelineID })
                    </div>

                }
            </div>
        </div>
    </div>
</div>

<div class="modal inmodal" id="LocationPopUpModal" role="dialog" aria-hidden="true">

</div>


<script>

   
  


    $(function () {
        $('.dtpicker').datepicker({ startDate: new Date(), autoclose: true, clearBtn: true });
    });

    function OpenPopUpLocation(PopupFrom, pipelineID) {
        $.ajax({
            url: '/Contracts/NotimationsPartials',
            type: 'GET',
            data: { popUpFor: PopupFrom, PipelineID: pipelineID },
            dataType: 'html',
            contentType: 'application/html;charset=utf-8'
        })
               .success(function (result) {
                       $('#LocationPopUpModal').html(result);
                       $('#LocationPopUpModal').modal('show');
                     //  $('#locationModalTable').DataTable();
               })
               .error(function (xhr, status) {
                   alert(status);
               })
    }



    function CntrLocationPopUpSelect(Name, Id, PropCode, RowNo, LocationPopUpFrom) {

        $('#LocationPopUpModal').modal('hide');
        if (LocationPopUpFrom == "RecLoc") {
            $('#RecLocDiv').find('span').text(Name);
            $('#LocationFromID').val(Id);
            $('#LocationFrom').val(Name);
        } else if (LocationPopUpFrom == "DelLoc")
        {
            $('#DelLocDiv').find('span').text(Name);
            $('#LocationToID').val(Id);
            $('#LocationTo').val(Name);
        }

    }

    $('#FuelPercentage, #MDQ').keypress(function (event) {
        var flag = isNumber(event, this);

        return flag;
    });


    $('#FuelPercentage').keyup(function (event) {
        var flag = NumberValidate(this);
        return flag;
    });

    
    $('#MDQ').keyup(function (element) {
        if (($("#MDQ").val()) - 100000000 > 0) {
            $("#MDQ").val("100000000.00");
            return false;
        }
        if (($("#MDQ").val()) < 0) {
            $("#MDQ").val("00.00");
            return false;
        }
        return true;
       
    });


    function NumberValidate(element) {
        if (($(element).val()) - 99.99 > 0) {
            $(element).val("99.99");
            return false;
        }
        return true;
    }


    function isNumber(evt, element) {

        var charCode = (evt.which) ? evt.which : event.keyCode

        if ((charCode != 46 || $(element).val().indexOf('.') != -1) &&      // “.” CHECK DOT, AND ONLY ONE.
            (charCode < 48 || charCode > 57))
            return false;

        return true;
    }


    $('#RequestNo').keypress(function (e) {
        var regex = new RegExp("^[a-zA-Z0-9 ]+$");

        var charCode = e.which;

        if (charCode == 8 || charCode == 0 || charCode == 45 || charCode == 35) {
            return;
        }
        else {
            var keyChar = String.fromCharCode(charCode);
            if (regex.test(keyChar)) {
                return true;
            }
        }
        e.preventDefault();
        return false;
    });


    $('#ReceiptZone, #DeliveryZone, #RateSchedule').keypress(function (e) {
        var regex = new RegExp("^[a-zA-Z0-9 ]+$");
         
        var charCode = e.which;

        if (charCode == 8 || charCode == 0) {
            return;
        }
        else {
            var keyChar = String.fromCharCode(charCode);
            if (regex.test(keyChar)) {
                return true;
            }
        }
        e.preventDefault();
        return false;
    });


    function validate() {
        var reg = /<(.|\n)*?>/g;
        var flag = true;
        var RequestNo = $('#RequestNo').val();
        var RequestTypeID = $("#RequestTypeID").val();
        var RateSchedule = $("#RateSchedule").val();
        var FuelPercentage = $("#FuelPercentage").val();
        var MDQ = $("#MDQ").val();
        var LocationFromID = $("#LocationFromID").val();
        var LocationToID = $("#LocationToID").val();
        var ValidUpto = $("#ValidUpto").val();
        var ReceiptZone = $("#ReceiptZone").val();
        var DeliveryZone = $("#DeliveryZone").val();
        if (($.trim(RequestNo).length == 0) || (RequestNo == "")|| ($.trim(RateSchedule).length == 0) || (RateSchedule == "") || (FuelPercentage == "") || (MDQ == "") || (LocationFromID == 0) || (LocationToID == 0) || (ValidUpto == "") || (ReceiptZone == "") || (DeliveryZone == "")) {
            toastr.warning("Please Fill required fields(*).");
            flag = false;
        } else if (reg.test(RequestNo) == true) {
            toastr.warning("", "These Special Charaters are not allow in RequestNo.");
            flag = false;
        }
        return flag;
    }


</script>

