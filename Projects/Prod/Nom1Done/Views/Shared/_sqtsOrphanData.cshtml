@model IEnumerable<Nom1Done.DTO.SummaryDTO>
@using System.Linq;
@using System;
@using Nom1Done.DTO;
@{
    bool sqtsForLoc = ViewBag.IsSqtsForLoc;
    var sumaryNomNew = new List<SummaryDTO>();
    int daysInMonth = DateTime.DaysInMonth(DateTime.Now.Year, ViewBag.Month);
    DateTime dtFrom = new DateTime(DateTime.Now.Year, ViewBag.Month, 1);
    List<DateTime> dates = Enumerable.Range(0, daysInMonth)
     .Select(offset => dtFrom.AddDays(offset))
     .ToList();
    int DateVal = 0;
    var pathType = ViewBag.PathType;
    var isSqtsQty = ViewBag.IsSqtsQty;
}
@foreach (var item in Model)
{
<tr class="sum">
    @{
        DateVal = 0;
    }
    @if (sqtsForLoc)
    {
        if (pathType != "D")
        {
            <td class="orangeThemeColor">@item.RecLoc</td>
        }
        if (pathType != "R")
        {
            <td class="orangeThemeColor">@item.DelLoc</td>
        }
        <td class="orangeThemeColor">@item.ContractSVC</td>
    }
    else
    {
        <td class="orangeThemeColor">@item.ContractSVC</td>
        if (pathType != "D")
        {
            <td class="orangeThemeColor">@item.RecLoc</td>
        }
        if (pathType != "R")
        {
            <td class="orangeThemeColor">@item.DelLoc</td>
        }
    }
    <td>@item.Cycle</td>
    @if (pathType == "R" || pathType == "P")
    {
        <td>@item.UpStreamName</td>
    }
    @if (pathType == "D" || pathType == "P")
    {
        <td>@item.DownStreamName</td>
    }
    <td>@item.PkgId</td>
    <td>@item.NomTrackingId</td>
    <td>@item.StatementDate</td>

    @if (isSqtsQty == "true")
    {
        <td>@item.Username</td>
    }

    @if (Model.Count() > 0)
    {

        foreach (var rec1 in dates.Where(a => a.Date < item.nomStartDate))
        {
            var RclassName = "Rsum" + DateVal;
            var DclassName = "Dsum" + DateVal;
            <td class="countable transparentZeros dates @RclassName">0</td> //TODO: For Rec QTY
            <td class="countable transparentZeros dates @DclassName">0</td> //TODO: For Del QTY
            DateVal = DateVal + 1;
        }

        foreach (var rec1 in dates.Where(a => a.Date >= item.nomStartDate && a.Date <= item.nomStartDate))
        {
            var RclassName2 = "Rsum" + DateVal;
            var DclassName2 = "Dsum" + DateVal;

            string resQty = "";
            string delQty = "";

            if (item.RecPointQty < 10)
            {
                resQty = item.RecPointQty.ToString();
            }
            else
            {
                resQty = String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0,0}", item.RecPointQty);
            }

            if (item.DelPointQty < 10)
            {
                delQty = item.DelPointQty.ToString();
            }
            else
            {
                delQty = String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0,0}", item.DelPointQty);
            }

            string ReductionReason = (string.IsNullOrEmpty(item.ReductionReasonDetail)) ? (string.IsNullOrEmpty(item.ReductionReason) ? "Not Available" : item.ReductionReason) : item.ReductionReason + ":" + item.ReductionReasonDetail;
            if (item.ReductionReason.Trim().ToLower() == "aok")
            {
                <td class="countable Rsum combat dates @RclassName2" data-toggle="tooltip" data-container="body" title="@ReductionReason">@resQty</td> //TODO: For Rec QTY
                <td class="countable Dsum combat dates @DclassName2" data-toggle="tooltip" data-container="body" title="@ReductionReason">@delQty</td>//TODO: For Del QTY
            }
            else
            {
                <td class="countable Rsum combat dates MonthHighlighted @RclassName2" data-toggle="tooltip" data-container="body" title="@ReductionReason">@resQty</td> //TODO: For Rec QTY
                <td class="countable Dsum combat dates MonthHighlighted @DclassName2" data-toggle="tooltip" data-container="body" title="@ReductionReason">@delQty</td>//TODO: For Del QTY
            }

            DateVal++;
        }

        foreach (var rec1 in dates.Where(a => a.Date > item.nomStartDate))
        {
            var RclassName3 = "Rsum" + DateVal;
            var DclassName3 = "Dsum" + DateVal;
            <td class="countable transparentZeros sum dates @RclassName3">0</td> //TODO: For Rec QTY
            <td class="countable transparentZeros sum dates @DclassName3">0</td>//TODO: For Del QTY
            DateVal++;
        }
    }
    @{
        var RtempClass = "Rsum" + DateVal;
        var DtempClass = "Dsum" + DateVal;
    }
    <td class="countable Rtotal-combat dates @RtempClass">0</td>
    <td class="countable Dtotal-combat dates @DtempClass">0</td>
    @{
        DateVal++;
    }
</tr>
}